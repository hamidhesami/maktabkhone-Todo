{"version":3,"sources":["stores/Todo.js","stores/TodoStore.js","components/TdoEntry.js","components/TodoItem.js","components/TodoItems.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Todo","store","id","input","status","clear","show","this","observable","ID","todos","push","CountItems","All","filter","todo","CompletedFillter","ShowCompleted","Completed","Active","ActiveFillter","ShowActive","Count","length","map","Close","AllFillter","Component","action","TodoEntry","state","Entry","ChangeInput","event","setState","target","value","CreateTodo","keyCode","AddTodo","className","onChange","onKeyDown","type","placeholder","TodoItem","observer","toggle","Toggle","props","close","checked","onClick","TodoItems","Footer","clearcompleted","ClearCompleted","showall","ShowAll","showcompleted","showactive","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18984f6b.chunk.js","sourcesContent":["import { action, observable } from \"mobx\";\r\n\r\nclass Todo {\r\n  store;\r\n  id;\r\n  @observable status;\r\n  @observable input;\r\n  @observable clear;\r\n  @observable show;\r\n\r\n  constructor(store, id, input, status, clear, show) {\r\n    this.store = store;\r\n    this.id = id;\r\n    this.status = status;\r\n    this.input = input;\r\n    this.clear = clear;\r\n    this.show = show;\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import Todo from \"./Todo\";\r\nimport { observable, action } from \"mobx\";\r\nimport { Component } from \"react\";\r\n\r\nclass TodoStore extends Component {\r\n  @observable todos = [];\r\n\r\n  ID = 0;\r\n\r\n  @observable Count = 0;\r\n\r\n  @observable All = [];\r\n\r\n  @observable Completed = [];\r\n\r\n  @observable Active = [];\r\n\r\n  @observable AllFillter = true;\r\n\r\n  @observable ActiveFillter = false;\r\n\r\n  @observable CompletedFillter = false;\r\n\r\n  @observable Fillter = \"\";\r\n\r\n  //   HideFooter() {\r\n  //     this.todos.length == 0 ? \"hidden\" : \"\";\r\n  //   }\r\n\r\n  @action\r\n  AddTodo(input) {\r\n    this.todos.push(new Todo(this, this.ID++, input, false, false, true));\r\n    this.CountItems();\r\n    this.All = this.todos.filter(todo => todo.clear == false);\r\n    if (this.CompletedFillter) {\r\n      this.ShowCompleted();\r\n    }\r\n  }\r\n\r\n  @action\r\n  Toggle(todo) {\r\n    todo.status = !todo.status;\r\n    this.Completed = this.todos.filter(\r\n      todo => (todo.status == true) & (todo.clear == false)\r\n    );\r\n    this.Active = this.todos.filter(\r\n      todo => (todo.status == false) & (todo.clear == false)\r\n    );\r\n    this.CountItems();\r\n    if (this.CompletedFillter) {\r\n      this.ShowCompleted();\r\n    }\r\n    if (this.ActiveFillter) {\r\n      this.ShowActive();\r\n    }\r\n  }\r\n\r\n  @action\r\n  CountItems() {\r\n    this.Count = this.todos.filter(\r\n      todo => (todo.status == false) & (todo.clear == false)\r\n    ).length;\r\n  }\r\n\r\n  @action\r\n  Close(todo) {\r\n    todo.clear = true;\r\n    this.CountItems();\r\n    this.All = this.todos.filter(todo => todo.clear == false);\r\n    this.Completed = this.todos.filter(\r\n      todo => (todo.status == true) & (todo.clear == false)\r\n    );\r\n  }\r\n\r\n  @action\r\n  ClearCompleted() {\r\n    this.Completed.map(todo => this.Close(todo));\r\n  }\r\n\r\n  @action\r\n  ShowAll() {\r\n    this.todos\r\n      .filter(todo => todo.clear == false)\r\n      .map(todo => (todo.show = true));\r\n    this.AllFillter = true;\r\n    this.ActiveFillter = false;\r\n    this.CompletedFillter = false;\r\n  }\r\n\r\n  @action\r\n  ShowCompleted() {\r\n    this.todos\r\n      .filter(todo => (todo.clear == false) & (todo.status == true))\r\n      .map(todo => (todo.show = true));\r\n\r\n    this.todos\r\n      .filter(todo => (todo.clear == false) & (todo.status == false))\r\n      .map(todo => (todo.show = false));\r\n    this.AllFillter = false;\r\n    this.ActiveFillter = false;\r\n    this.CompletedFillter = true;\r\n  }\r\n\r\n  @action\r\n  ShowActive() {\r\n    this.todos\r\n      .filter(todo => (todo.clear == false) & (todo.status == false))\r\n      .map(todo => (todo.show = true));\r\n\r\n    this.todos\r\n      .filter(todo => (todo.clear == false) & (todo.status == true))\r\n      .map(todo => (todo.show = false));\r\n    this.AllFillter = false;\r\n    this.ActiveFillter = true;\r\n    this.CompletedFillter = false;\r\n  }\r\n\r\n  //   @action\r\n  //   FillterTodo() {\r\n  //     this.AllFillter = !this.AllFillter;\r\n  //     this.ActiveFillter = !this.ActiveFillter;\r\n  //     this.CompletedFillter = !this.CompletedFillter;\r\n  //   }\r\n}\r\n\r\nconst store = new TodoStore();\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport { action } from \"mobx\";\r\nimport store from \"../stores/TodoStore\";\r\n\r\nclass TodoEntry extends Component {\r\n  state = {\r\n    Entry: \"\"\r\n  };\r\n\r\n  ChangeInput = event => {\r\n    this.setState({\r\n      Entry: event.target.value\r\n    });\r\n  };\r\n\r\n  CreateTodo = event => {\r\n    if ((event.keyCode == 13) & (this.state.Entry != \"\")) {\r\n      store.AddTodo(this.state.Entry);\r\n      this.setState({\r\n        Entry: \"\"\r\n      });\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <h1>todo</h1>\r\n        <input\r\n          value={this.state.Entry}\r\n          onChange={this.ChangeInput}\r\n          onKeyDown={this.CreateTodo}\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"what needs to be done?\"\r\n        />\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoEntry;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action } from \"mobx\";\r\nimport store from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n  toggle = () => {\r\n    store.Toggle(this.props.todo);\r\n  };\r\n\r\n  close = () => {\r\n    store.Close(this.props.todo);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <li\r\n        className={`${this.props.todo.status ? \"completed\" : \"\"}\r\n             ${this.props.todo.show ? \"view\" : \"hidden\"} \r\n             ${this.props.todo.clear ? \"hidden\" : \"view\"}`}\r\n      >\r\n        <div className=\"view\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"toggle\"\r\n            value=\"on\"\r\n            onChange={this.toggle}\r\n            checked={this.props.todo.status}\r\n          />\r\n\r\n          <label>{this.props.todo.input}</label>\r\n\r\n          <button className=\"destroy\" onClick={this.close}></button>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { observer } from \"mobx-react\";\r\nimport store from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"main\">\r\n        <ul className=\"todo-list\">            \r\n          {store.todos.map(todo => {\r\n            return <TodoItem todo={todo} />;\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItems;\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action } from \"mobx\";\r\nimport store from \"../stores/TodoStore\";\r\n\r\n@observer\r\nclass Footer extends Component {\r\n  clearcompleted = () => {\r\n    store.ClearCompleted();\r\n  };\r\n\r\n  showall = () => {\r\n    store.ShowAll();\r\n  };\r\n\r\n  showcompleted = () => {\r\n    store.ShowCompleted();\r\n  };\r\n\r\n  showactive = () => {\r\n    store.ShowActive();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={`footer ${store.All.length == 0 ? \"hidden\" : \"\"}`}>\r\n        <div className=\"todo-count\">\r\n          {store.Count < 2\r\n            ? `${store.Count} item left`\r\n            : `${store.Count} items left`}\r\n        </div>\r\n\r\n        <ul className=\"filters\">\r\n          <li>\r\n            <a\r\n              onClick={this.showall}\r\n              className={store.AllFillter ? \"selected\" : \"\"}\r\n            >\r\n              All\r\n            </a>\r\n          </li>\r\n\r\n          <li>\r\n            <a\r\n              onClick={this.showactive}\r\n              className={store.ActiveFillter ? \"selected\" : \"\"}\r\n            >\r\n              Active\r\n            </a>\r\n          </li>\r\n\r\n          <li>\r\n            <a\r\n              onClick={this.showcompleted}\r\n              className={store.CompletedFillter ? \"selected\" : \"\"}\r\n            >\r\n              Completed\r\n            </a>\r\n          </li>\r\n        </ul>\r\n\r\n        <div\r\n          className={`clear-completed ${\r\n            store.Completed.length == 0 ? \"hidden\" : \"\"\r\n          }`}\r\n          onClick={this.clearcompleted}\r\n        >\r\n          clear completed\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { observer } from \"mobx-react\";\nimport TodoEntry from \"./components/TdoEntry\";\nimport TodoItems from \"./components/TodoItems\";\nimport Footer from \"./components/Footer\";\n\n@observer\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry />\n\n        <TodoItems />\n        \n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}